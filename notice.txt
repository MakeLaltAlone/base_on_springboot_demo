注意：
1. 采用Mysql8.0  恶心！！！
2. 采用SpringBoot1.3以上版本需要手动注入SqlSessionFactoryBean   -- 例如demo中的DataSourceConfig

记录实现的功能：
1. 单元测试
2. @RequestParam 接收参数
3. @RestController @ResponseBody 区别
4. 自定义Filter  编写自定义Filter(实现Filter),重写init、dofilter、destory方法，把自定义Filter注册到容器中@Bean、FilterRegistrationBean
5. 读取自定义配置文件
        方法一:通过@PropertySource("classpath:xxx.properties")+@Value
        方法二:通过封装进一个实体中 例如：ParameterConfig
6. 集成log4j2   控制台，文件(每一个小时一个)，邮件(异步发送)，不同级别输出到不同的文件中
7. 处理全局异常@ControllerAdvice @ExceptionHandler    这个全局异常，只捕获Controller层产生的异常 和 其他层产生的异常没有被处理而一直抛到了Controller层且没有在Controller捕获处理的异常
8. Mysql8.0注意点
        驱动由com.mysql.jdbc.Driver改为com.mysql.cj.jdbc.Driver
        要求必须要加时区serverTimezone=UTC   必须设置useSSL=false 例如：url: jdbc:mysql://127.0.0.1:3306/base_on_springboot_demo?serverTimezone=UTC&characterEncoding=utf8&useUnicode
9. AOP 注解切面   @Aspect  @Component  @Pointcut    可以通过注解或表达式两种方式切入
10. 捕获子线程异常 实现UncaughtExceptionHandler类重写uncaughtException方法，子线程入口处增加Thread.setDefaultUncaughtExceptionHandler(new MyCrashHandler());   //MyCrashHandler为重写的类
11. SpringBoot默认识别的mybatis的xml文件是在resource下的mapper文件夹下
12. 集成Redis 利用Jedis需要设置Redis的密码  利用了函数式接口（抽取从JedisPoll中获取连接的代码）  （使用RedisTemplate实现操作Redis数据库的代码在项目中已注释掉）
    实现缓存
13. 数据校验 采用Hibernate-validator进行统一参数校验
        -- 通过@Valid和BindingResult中获取
        -- 手动从实体中获取
        -- 自定义校验注解
        -- 通过注解和AOP获取
14. 共享session
    1、引入依赖
    <dependency>
        <groupId>org.springframework.session</groupId>
        <artifactId>spring-session-data-redis</artifactId>
    </dependency>
    2、Session配置：
    @Configuration
    @EnableRedisHttpSession(maxInactiveIntervalInSeconds = 86400*30)
    public class SessionConfig {
    }
15. 多数据源--分包的形式实现(未实现)    （还有一种利用AOP实现的方案，这里没有采用）
16. 利用TimeWatch和AOP和自定义注解的方式获取方法执行的时间
17. RabbitMQ    一个生产者多个消费者的情况下，消息会被消费者平均消费